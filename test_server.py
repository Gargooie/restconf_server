#!/usr/bin/env python3
import requests
import json
import time
import sys

# –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
BASE_URL = "http://localhost:8080"

def test_server_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
    try:
        response = requests.get(f"{BASE_URL}/.well-known/host-meta", timeout=2)
        return response.status_code == 200
    except:
        return False

def test_get_root():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–Ω—è API"""
    print("\n=== –¢–µ—Å—Ç: GET /restconf ===")
    try:
        response = requests.get(f"{BASE_URL}/restconf", 
                              headers={"Accept": "application/yang-data+json"})
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("–û—Ç–≤–µ—Ç:", json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print("–û—à–∏–±–∫–∞:", response.text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_get_all_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–µ—Å—Ç: GET /restconf/data ===")
    try:
        response = requests.get(f"{BASE_URL}/restconf/data",
                              headers={"Accept": "application/yang-data+json"})
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            data = response.json()
            print("–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:", list(data.keys()))
        else:
            print("–û—à–∏–±–∫–∞:", response.text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_get_library():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    print("\n=== –¢–µ—Å—Ç: GET library ===")
    try:
        response = requests.get(f"{BASE_URL}/restconf/data/example-jukebox:jukebox/library",
                              headers={"Accept": "application/yang-data+json"})
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: {len(data.get('artist', []))}")
        else:
            print("–û—à–∏–±–∫–∞:", response.text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_patch_player():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–µ–µ—Ä–∞"""
    print("\n=== –¢–µ—Å—Ç: PATCH player settings ===")
    try:
        patch_data = {"gap": "1.5"}
        response = requests.patch(f"{BASE_URL}/restconf/data/example-jukebox:jukebox/player",
                                json=patch_data,
                                headers={
                                    "Content-Type": "application/yang-data+json",
                                    "Accept": "application/yang-data+json"
                                })
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code in [200, 204]:
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–µ–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("–û—à–∏–±–∫–∞:", response.text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_rpc_play():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RPC –æ–ø–µ—Ä–∞—Ü–∏—é play"""
    print("\n=== –¢–µ—Å—Ç: POST RPC play ===")
    try:
        rpc_data = {
            "input": {
                "playlist": "Favorites", 
                "song-number": 1
            }
        }
        response = requests.post(f"{BASE_URL}/restconf/operations/example-jukebox:play",
                               json=rpc_data,
                               headers={
                                   "Content-Type": "application/yang-data+json",
                                   "Accept": "application/yang-data+json"
                               })
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç RPC:", json.dumps(result, indent=2, ensure_ascii=False))
        else:
            print("–û—à–∏–±–∫–∞:", response.text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_get_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\n=== –¢–µ—Å—Ç: GET /restconf/operations ===")
    try:
        response = requests.get(f"{BASE_URL}/restconf/operations",
                              headers={"Accept": "application/yang-data+json"})
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            operations = response.json()
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:", json.dumps(operations, indent=2, ensure_ascii=False))
        else:
            print("–û—à–∏–±–∫–∞:", response.text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    print("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RESTCONF Jukebox —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    if not test_server_running():
        print(" –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python3 main.py")
        sys.exit(1)

    print(" –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_get_root()
    test_get_all_data()
    test_get_library()
    test_get_operations()
    test_patch_player()
    test_rpc_play()

    print("\n" + "=" * 50)
    print(" –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
